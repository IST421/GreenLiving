//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Team_Compostable.datamine {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/infoRetrieval")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="userDeets", Namespace="http://schemas.datacontract.org/2004/07/infoRetrieval")]
    [System.SerializableAttribute()]
    public partial class userDeets : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string countryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string country {
            get {
                return this.countryField;
            }
            set {
                if ((object.ReferenceEquals(this.countryField, value) != true)) {
                    this.countryField = value;
                    this.RaisePropertyChanged("country");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="datamine.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Team_Compostable.datamine.CompositeType GetDataUsingDataContract(Team_Compostable.datamine.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Team_Compostable.datamine.CompositeType> GetDataUsingDataContractAsync(Team_Compostable.datamine.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userRegister", ReplyAction="http://tempuri.org/IService1/userRegisterResponse")]
        void userRegister(string username, string password, string firstname, string lastname, string email, string city, string state, string country, string telephone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/userRegister", ReplyAction="http://tempuri.org/IService1/userRegisterResponse")]
        System.Threading.Tasks.Task userRegisterAsync(string username, string password, string firstname, string lastname, string email, string city, string state, string country, string telephone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getprofileID", ReplyAction="http://tempuri.org/IService1/getprofileIDResponse")]
        int getprofileID(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getprofileID", ReplyAction="http://tempuri.org/IService1/getprofileIDResponse")]
        System.Threading.Tasks.Task<int> getprofileIDAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateAchievements", ReplyAction="http://tempuri.org/IService1/updateAchievementsResponse")]
        void updateAchievements(int profileID, int achievement, string actualvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateAchievements", ReplyAction="http://tempuri.org/IService1/updateAchievementsResponse")]
        System.Threading.Tasks.Task updateAchievementsAsync(int profileID, int achievement, string actualvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createuserAchievements", ReplyAction="http://tempuri.org/IService1/createuserAchievementsResponse")]
        void createuserAchievements(int profID, int acheivements, string achievemenetpoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createuserAchievements", ReplyAction="http://tempuri.org/IService1/createuserAchievementsResponse")]
        System.Threading.Tasks.Task createuserAchievementsAsync(int profID, int acheivements, string achievemenetpoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/carbonInsert", ReplyAction="http://tempuri.org/IService1/carbonInsertResponse")]
        void carbonInsert(string username, double score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/carbonInsert", ReplyAction="http://tempuri.org/IService1/carbonInsertResponse")]
        System.Threading.Tasks.Task carbonInsertAsync(string username, double score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/loginUser", ReplyAction="http://tempuri.org/IService1/loginUserResponse")]
        int loginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/loginUser", ReplyAction="http://tempuri.org/IService1/loginUserResponse")]
        System.Threading.Tasks.Task<int> loginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/sendBackdeets", ReplyAction="http://tempuri.org/IService1/sendBackdeetsResponse")]
        Team_Compostable.datamine.userDeets sendBackdeets(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/sendBackdeets", ReplyAction="http://tempuri.org/IService1/sendBackdeetsResponse")]
        System.Threading.Tasks.Task<Team_Compostable.datamine.userDeets> sendBackdeetsAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Team_Compostable.datamine.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Team_Compostable.datamine.IService1>, Team_Compostable.datamine.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Team_Compostable.datamine.CompositeType GetDataUsingDataContract(Team_Compostable.datamine.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Team_Compostable.datamine.CompositeType> GetDataUsingDataContractAsync(Team_Compostable.datamine.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void userRegister(string username, string password, string firstname, string lastname, string email, string city, string state, string country, string telephone) {
            base.Channel.userRegister(username, password, firstname, lastname, email, city, state, country, telephone);
        }
        
        public System.Threading.Tasks.Task userRegisterAsync(string username, string password, string firstname, string lastname, string email, string city, string state, string country, string telephone) {
            return base.Channel.userRegisterAsync(username, password, firstname, lastname, email, city, state, country, telephone);
        }
        
        public int getprofileID(string username) {
            return base.Channel.getprofileID(username);
        }
        
        public System.Threading.Tasks.Task<int> getprofileIDAsync(string username) {
            return base.Channel.getprofileIDAsync(username);
        }
        
        public void updateAchievements(int profileID, int achievement, string actualvalue) {
            base.Channel.updateAchievements(profileID, achievement, actualvalue);
        }
        
        public System.Threading.Tasks.Task updateAchievementsAsync(int profileID, int achievement, string actualvalue) {
            return base.Channel.updateAchievementsAsync(profileID, achievement, actualvalue);
        }
        
        public void createuserAchievements(int profID, int acheivements, string achievemenetpoints) {
            base.Channel.createuserAchievements(profID, acheivements, achievemenetpoints);
        }
        
        public System.Threading.Tasks.Task createuserAchievementsAsync(int profID, int acheivements, string achievemenetpoints) {
            return base.Channel.createuserAchievementsAsync(profID, acheivements, achievemenetpoints);
        }
        
        public void carbonInsert(string username, double score) {
            base.Channel.carbonInsert(username, score);
        }
        
        public System.Threading.Tasks.Task carbonInsertAsync(string username, double score) {
            return base.Channel.carbonInsertAsync(username, score);
        }
        
        public int loginUser(string username, string password) {
            return base.Channel.loginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<int> loginUserAsync(string username, string password) {
            return base.Channel.loginUserAsync(username, password);
        }
        
        public Team_Compostable.datamine.userDeets sendBackdeets(string username) {
            return base.Channel.sendBackdeets(username);
        }
        
        public System.Threading.Tasks.Task<Team_Compostable.datamine.userDeets> sendBackdeetsAsync(string username) {
            return base.Channel.sendBackdeetsAsync(username);
        }
    }
}
